# PostgreSQL DTF library useful for test-cases.
# Copyright (C) 2015 Red Hat, Inc.
# Written by Pavel Raiskup.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


export pgscl={{ m.pgscl }}
export pgscl_namespace=${pgscl+$pgscl-}
export pgscl_prefix=${pgscl+/opt/rh/$pgscl/root}

export pgdtf_service=${pgscl_namespace}postgresql

export pgdtf_homedir=/var/lib/pgsql
export pgdtf_datadir=/var/lib/pgsql/data
export pgdtf_datadirorigin=/var/lib/pgsql/data
export pgdtf_olddata=/var/lib/pgsql/data-old
test -n "$pgscl" && {
    pgdtf_datadir=/var/opt/rh/$pgscl/lib/pgsql/data
    pgdtf_olddata=/var/lib/pgsql/data
}

export pgdtf_server=${pgscl_namespace}postgresql-server


pgdtf_scl_paths ()
{
    case $1 in
    postgresql92)
        pgdtf_scl_paths_data=/opt/rh/postgresql92/root/var/lib/pgsql/data
        ;;
    *)
        pgdtf_scl_paths_data=/var/opt/rh/"$1"/lib/pgsql/data
        ;;
    esac
}


pgdtf_scl_wrapper ()
{
    if test -z "$pgscl"; then
        eval "$1"
    else
        scl enable $pgscl "$1"
    fi
}


pgdtf_empty_dir ()
(
    cd "$1" || exit 2
    for _d_item in .* *; do
        case $_d_item in
        ..|.)
            continue
            ;;
        \*)
            test -f '*' && exit 1
            ;;
        *)
            exit 1
        esac
    done
    exit 0
)

dtf_cmd_wrapper=pgdtf_scl_wrapper


__pgdtf_basic_assert ()
{
    ### Check that we can't actually break user's system. ###
    dtf_assert cmd "service $pgdtf_service status" 3

    dtf_assert_right_distro

    test -f "$pgdtf_datadir"/PG_VERSION 2>/dev/null \
        && dtf_fail "PG_VERSION file should not exist in $pgdtf_datadir"
    test -e "$pgdtf_homedir" || return 0
    find "$pgdtf_homedir" -maxdepth 1 -name '*.log' -exec false {} +
    test $? -eq 0 || dtf_fail "some .log files exist in $pgdtf_homedir"
}

pgdtf_init ()
{
    # TODO: don't require findutils
    dtf_prereq pkg installed findutils
    __pgdtf_basic_assert
}

pgdtf_init_server_test ()
{
    dtf_prereq pkg installed $pgdtf_server
    pgdtf_init
}

pgdtf_cleanup_after_run ()
{
    dtf_assert cmd 'rm -r $pgdtf_datadir/*' 0
}

pgdtf_cleanup_after_initdb ()
{
    pgdtf_cleanup_after_run
    dtf_assert cmd 'rm $pgdtf_homedir/*.log'     0
}

pgdtf_cleanup_after_upgrade ()
{
    pgdtf_cleanup_after_initdb
    dtf_assert cmd 'rm -r $pgdtf_olddata' 0
}

__pgdtf_setup_wrap ()
{
    _d_action=$1 ; shift
    func_quote eval "$@"
    test -n "$func_quote_result" && _d_action="$_d_action $func_quote_result"

    set dummy "{{ config.os.id }}" "{{ config.os.version }}" ; shift

    case ${pgscl+scl-}$1-$2 in
      scl-*)
        case $pgscl in
          postgresql92)
            dtf_assert cmd "postgresql-setup $_d_action"    0
            ;;
          *)
            dtf_assert cmd "postgresql-setup --$_d_action"  0
            ;;
        esac
        ;;
      fedora-18|fedora-19|fedora-20|fedora-21|rhel-5*|rhel-6*|rhel-7*)
        dtf_assert cmd "postgresql-setup $_d_action"    0
        ;;
      fedora*|rhel*)
        dtf_assert cmd "postgresql-setup --$_d_action"  0
        ;;
      *)
        dtf_fail "not implemented for this architecture"
        ;;
    esac
}

pgdtf_simple_upgrade ()
{
    __pgdtf_setup_wrap upgrade "$@"
}

pgdtf_initdb ()
{
    __pgdtf_setup_wrap initdb
}

pgdtf_check_started ()
{
    dtf_assert cmd "service ${pgdtf_service} status" 0
}

pgdtf_start ()
{
    dtf_assert cmd 'service ${pgdtf_service} start' 0
    pgdtf_check_started
}

pgdtf_initdb_and_start ()
{
    pgdtf_initdb
    pgdtf_start
}

pgdtf_stop ()
{
    dtf_assert cmd "service ${pgdtf_service} stop" 0
    pgdtf_check_stopped
}

pgdtf_stop_and_clean ()
{
    pgdtf_stop
    pgdtf_cleanup_after_initdb
}

pgdtf_check_stopped ()
{
    dtf_assert cmd 'service ${pgdtf_service} status' 3
}

pgdtf_unpack_remote_data_tarball ()
{
    (
      tarball="$1"
      test -d "$2" || {
          mkdir -p "$2"
      }
      cd "$2"
      set -o pipefail
      dtf_debug pgdtf_lib "downloading '$tarball' into '$2' directory"
      curl "$tarball" | tar -xzf -
    ) || dtf_fail "can't download and unpack '$1'"
}

# Detect current distribution and print set of "distro version action" lines
# where DISTRO may be rhel/fedora, VERSION may be e.g. 6.6 for rhel or 20 for
# Fedora.  ACTION is either run or upgrade and it means whether currently
# installed PostgreSQL server is able to RUN the older data from DISTRO-VERSION
# or it should be first upgraded.
#
# What versions are currently in supported Fedora versions:
#
#       f20 & f21               (9.3.10)
#       f22 & f23 & rawhide     (9.4.5)
#
# Older Fedora versions:
#
#       f17             (9.1.9)
#       f18             (9.2.5)
#       f19             (9.2.9)
pgdtf_upgrade_matrix ()
{
    # {% if config.os.id == "fedora" and config.os.version == 19 %}
    pgdtf_upgrade_matrix_result='
        fedora-17-upgrade
        fedora-18-run
        fedora-19-run
    '
    # {% elif config.os.id == "fedora" and config.os.version == 20 %}
    pgdtf_upgrade_matrix_result='
        fedora-18-upgrade
        fedora-19-upgrade
        fedora-20-run
    '
    # {% elif config.os.id == "fedora" and config.os.version == 21 %}
    pgdtf_upgrade_matrix_result='
        fedora-18-upgrade
        fedora-19-upgrade
        fedora-20-run
        fedora-21-run
    '
    # {% elif config.os.id == "fedora" and config.os.version == 22 %}
    pgdtf_upgrade_matrix_result='
        fedora-20-upgrade
        fedora-21-upgrade
        fedora-22-run
    '
    # {% elif config.os.id == "fedora" and config.os.version == 23 %}
    pgdtf_upgrade_matrix_result='
        fedora-20-upgrade
        fedora-21-upgrade
        fedora-22-run
        fedora-23-run
    '
    # {% elif config.os.id == "fedora" and config.os.version == 24 %}
    pgdtf_upgrade_matrix_result='
        fedora-22-upgrade
        fedora-23-upgrade
        fedora-24-run
    '
    # {% elif config.os.id == "rhel" and m.pgscl != "" %}
    # {%   if m.pgscl == "rh-postgresql94" %}
    pgdtf_upgrade_matrix_result='
        rhel-7-upgrade
        rhel-7:postgresql92-upgrade
    '
    # {%   endif %}
    # {% else %}
    pgdtf_upgrade_matrix_result=
    # {% endif %}
}


__pgdtf_drastic_cleanup ()
{
    service postgresql stop
    /bin/rm -rf "$pgdtf_datadir"/*

    cp "$pgdtf_homedir"/*.log ./

    /bin/rm -rf "$pgdtf_homedir"/*.log
}


pgdtf_test_upgrades ()
{
    dtf_fail_hooks='__pgdtf_drastic_cleanup'
    _d_archive=$1 ; shift || dtf_die "pgdtf_test_upgrades requires argument"
    pgdtf_mirror
    pgdtf_upgrade_matrix
    for _d_item in $pgdtf_upgrade_matrix_result
    do
      eval set dummy `echo "$_d_item" | sed 's/-/ /g'` ; shift
      echo >&2 "checking upgrade from: $*"
      _d_from_scl=
      _d_datadir=$pgdtf_datadirorigin
      _d_upgrade_args=
      _d_old_server_pkg=postgresql-upgrade

      _d_from_distro=$1
      case $2 in
      *:*)
        _d_from_distroversion=${2%%:*}
        _d_from_scl=${2##*:}
        pgdtf_scl_paths "$_d_from_scl"
        pgdtf_olddata=$pgdtf_scl_paths_data
        func_quote eval --upgrade-from $_d_from_scl-postgresql
        _d_upgrade_args=$func_quote_result
        _d_datadir=$pgdtf_scl_paths_data
        _d_old_server_pkg="${_d_from_scl}-postgresql-server"

        case $pgscl in
        rh-postgresql94|postgresql92)
            # we installed 'pg_upgrade' binary into *-upgrade subpackage
            # previously.  From rh-postgresql95 the pg_upgrade binary is in base
            # package (e.g. in rh-postgresql95-postgresql).
            dtf_prereq pkg installed "${pgscl_namespace}postgresql-upgrade"
            ;;
        esac
        ;;
      *)
        _d_from_distroversion=$2
        if test -z "$pgscl"; then
            _d_old_server_pkg=postgresql-upgrade
        else
            _d_old_server_pkg=postgresql-server
        fi
        ;;
      esac

      dtf_prereq pkg installed "$_d_old_server_pkg"

      _d_how_upgrade=$3
      _d_url="$pgdtf_mirror_result/$_d_from_distro/$_d_from_distroversion/"
      test -n "$_d_from_scl" && {
          _d_url="$_d_url/scl/$_d_from_scl/"
      }
      _d_url=$_d_url"{{ config.os.arch }}"/$_d_archive

      case $_d_datadir in
        *data-old)
          test -e "$_d_datadir" >/dev/null \
            && dtf_fail "$_d_datadir directory should not exist"
          ;;
        *)
          if test -d "$_d_datadir"; then
             pgdtf_empty_dir "$_d_datadir" \
                || dtf_fail "$_d_datadir should be empty"
          fi
          ;;
      esac

      pgdtf_unpack_remote_data_tarball "$_d_url" "$(dirname "$_d_datadir")"

      clean_action=pgdtf_cleanup_after_run
      case $_d_how_upgrade in
        upgrade)
          eval pgdtf_simple_upgrade $_d_upgrade_args
          clean_action=pgdtf_cleanup_after_upgrade
          ;;
      esac
      pgdtf_start
      pgdtf_stop
      $clean_action
    done
    dtf_fail_hooks=
}

pgdtf_mirror ()
{
    dtf_dataurls='
http://pensioner.lab.eng.brq.redhat.com/root-tests/data/postgresql/latest
http://209.132.179.109/dtf/_beta/data/latest
'
    test -n "$pgdtf_mirror_result" && return 0

    _d_timeout=1
    while test $_d_timeout -lt 32; do
      for _d_url in $dtf_dataurls
      do
        echo >&2 "trying $_d_url for $_d_timeout seconds"
        timeout $_d_timeout curl "$_d_url" >/dev/null \
            && pgdtf_mirror_result="$_d_url" \
            && return 0
      done
      _d_timeout=`expr $_d_timeout '*' 2`
    done

    dtf_fail "pgdtf_mirror: no mirror found"
}


# pgdtf_fix_locale LANGS
# ----------------------
# Reinstall locale for LANGS (space separted list of language codes).
pgdtf_fix_locale ()
{
    for_languages=$1
    reinstall=false

    dtf_debug pgdtf_lib "making sure '$for_languages' langs are installed"

    # Fedora (probably 23+) glibc-common does not install all locales by
    # default.
    if test -f /etc/rpm/macros.image-language-conf; then
      for _d_lang in $for_languages
      do
        set dummy "$_d_lang".{UTF-8,utf-8,utf8} ; shift
        for _d_locale
        do
          case `rpm --eval "%_install_langs"` in
            *"$_d_locale"*|all)
              ;;
            *)
              sed -i 's/\(C:.*\)/\1:'"$_d_locale/" \
                  /etc/rpm/macros.image-language-conf \
                || dtf_fail "can't fix %_install_langs"
              echo >&2 "reinstalling glibc-common to fix $_d_locale"
              reinstall=:
              ;;
          esac
        done
      done
    fi

    for _d_lang in $for_languages
    do
      test -f /usr/share/i18n/locales/"$_d_lang" || {
        reinstall=:
        echo >&2 "reinstalling glibc-common to fix $_d_lang"
      }
    done

    $reinstall || return 0
    # https://bugzilla.redhat.com/show_bug.cgi?id=1129697
    # {{ "\n    " + commands.pkginstaller.reinstall(['glibc-common'], {'docs': False}) }}
    test $? -eq 0 || dtf_fail "can't reinstall glibc-common"
}


# pgdtf_run_rpmbuild ARGS..
# -------------------------
# Run rpmbuild against local directory.
pgdtf_run_rpmbuild ()
{
    rpmbuild \
        --define "_sourcedir $PWD"      \
        --define "_rpmdir $PWD"         \
        --define "_specdir $PWD"        \
        --define "_builddir $PWD"       \
        --define "_srcrpmdir $PWD"      \
        "$@"
}
