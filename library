# PostgreSQL DTF library useful for test-cases.
# Copyright (C) 2015 Red Hat, Inc.
# Written by Pavel Raiskup.
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


__pgdtf_basic_assert ()
{
    ### Check that we can't actually brake user's system. ###
    dtf_assert cmd 'service postgresql status' 3

    dtf_assert_right_distro

    test -f '/var/lib/pgsql/data/PG_VERSION' 2>/dev/null \
        && dtf_fail 'PG_VERSION file should not exist in $datadir'

    test -e '/var/lib/pgsql/data-old' >/dev/null \
        && dtf_fail '/var/lib/pgsql/data-old directory should not exist'

    test -e /var/lib/pgsql || return 0
    find /var/lib/pgsql/ -maxdepth 1 -name '*.log' -exec false {} +
    test $? -eq 0 || dtf_fail 'some .log files exist in $datadir'
}

pgdtf_init ()
{
    # TODO: don't require findutils
    dtf_prereq pkg installed findutils
    __pgdtf_basic_assert
}

pgdtf_init_server_test ()
{
    pgdtf_init
    dtf_prereq pkg installed postgresql-server
}

pgdtf_cleanup_after_run ()
{
    dtf_assert cmd 'rm -r /var/lib/pgsql/data/*' 0
}

pgdtf_cleanup_after_initdb ()
{
    pgdtf_cleanup_after_run
    dtf_assert cmd 'rm /var/lib/pgsql/*.log'     0
}

pgdtf_cleanup_after_upgrade ()
{
    pgdtf_cleanup_after_initdb
    dtf_assert cmd 'rm -r /var/lib/pgsql/data-old' 0
}

__pgdtf_setup_wrap ()
{
    _d_action=$1
    set dummy "{{ config.os.id }}" "{{ config.os.version }}" ; shift
    case $1-$2 in
      fedora-18|fedora-19|fedora-20|fedora-21|rhel-5*|rhel-6*|rhel-7*)
        dtf_assert cmd "postgresql-setup $_d_action"    0
        ;;
      fedora*|rhel*)
        dtf_assert cmd "postgresql-setup --$_d_action"  0
        ;;
      *)
        dtf_fail "not implemented for this architecture"
        ;;
    esac
}

pgdtf_simple_upgrade ()
{
    __pgdtf_setup_wrap upgrade
}

pgdtf_initdb ()
{
    __pgdtf_setup_wrap initdb
}

pgdtf_check_started ()
{
    dtf_assert cmd "service postgresql status" 0
}

pgdtf_start ()
{
    dtf_assert cmd 'service postgresql start' 0
    pgdtf_check_started
}

pgdtf_initdb_and_start ()
{
    pgdtf_initdb
    pgdtf_start
}

pgdtf_stop ()
{
    dtf_assert cmd "service postgresql stop" 0
    pgdtf_check_stopped
}

pgdtf_stop_and_clean ()
{
    pgdtf_stop
    pgdtf_cleanup_after_initdb
}

pgdtf_check_stopped ()
{
    dtf_assert cmd 'service postgresql status' 3
}

pgdtf_unpack_remote_data_tarball ()
{
    (
      tarball="$1"
      cd /var/lib/pgsql || return 1
      set -o pipefail
      echo "downloading '$tarball'"
      curl "$tarball" | tar -xzf -
    ) || dtf_fail "can't download and unpack '$1'"
}

# Detect current distribution and print set of "distro version action" lines
# where DISTRO may be rhel/fedora, VERSION may be e.g. 6.6 for rhel or 20 for
# Fedora.  ACTION is either run or upgrade and it means whether currently
# installed PostgreSQL server is able to RUN the older data from DISTRO-VERSION
# or it should be first upgraded.
#
# What versions are currently in supported Fedora versions:
#
#       f20 & f21               (9.3.10)
#       f22 & f23 & rawhide     (9.4.5)
#
# Older Fedora versions:
#
#       f17             (9.1.9)
#       f18             (9.2.5)
#       f19             (9.2.9)
pgdtf_upgrade_matrix ()
{
    # {% if config.os.id == "fedora" and config.os.version == 19 %}
    pgdtf_upgrade_matrix_result='
        fedora-17-upgrade
        fedora-18-run
        fedora-19-run
    '
    # {% elif config.os.id == "fedora" and config.os.version == 20 %}
    pgdtf_upgrade_matrix_result='
        fedora-18-upgrade
        fedora-19-upgrade
        fedora-20-run
    '
    # {% elif config.os.id == "fedora" and config.os.version == 21 %}
    pgdtf_upgrade_matrix_result='
        fedora-18-upgrade
        fedora-19-upgrade
        fedora-20-run
        fedora-21-run
    '
    # {% elif config.os.id == "fedora" and config.os.version == 22 %}
    pgdtf_upgrade_matrix_result='
        fedora-20-upgrade
        fedora-21-upgrade
        fedora-22-run
    '
    # {% elif config.os.id == "fedora" and config.os.version == 23 %}
    pgdtf_upgrade_matrix_result='
        fedora-20-upgrade
        fedora-21-upgrade
        fedora-22-run
        fedora-23-run
    '
    # {% elif config.os.id == "fedora" and config.os.version == 24 %}
    pgdtf_upgrade_matrix_result='
        fedora-20-upgrade
        fedora-21-upgrade
        fedora-22-run
        fedora-23-run
        fedora-24-run
    '
    # {% endif %}
}


__pgdtf_drastic_cleanup ()
{
    service postgresql stop
    /bin/rm -rf /var/lib/pgsql/data/*
    /bin/rm -rf /var/lib/pgsql/data-old
    /bin/rm -rf /var/lib/pgsql/*.log
}


pgdtf_test_upgrades ()
{
    dtf_fail_hooks='__pgdtf_drastic_cleanup'
    _d_archive=$1 ; shift || dtf_die "pgdtf_test_upgrades requires argument"
    pgdtf_mirror
    pgdtf_upgrade_matrix
    for _d_item in $pgdtf_upgrade_matrix_result
    do
      eval set dummy `echo "$_d_item" | sed 's/-/ /g'` ; shift
      echo >&2 "checking upgrade from: $*"
      _d_from_distro=$1
      _d_from_distroversion=$2
      _d_how_upgrade=$3
      _d_url="$pgdtf_mirror_result/$_d_from_distro/$_d_from_distroversion/"
      _d_url=$_d_url"{{ config.os.arch }}"/$_d_archive

      pgdtf_unpack_remote_data_tarball "$_d_url"

      clean_action=pgdtf_cleanup_after_run
      case $_d_how_upgrade in
        upgrade)
          pgdtf_simple_upgrade
          clean_action=pgdtf_cleanup_after_upgrade
          ;;
      esac
      pgdtf_start
      pgdtf_stop
      $clean_action
    done
    dtf_fail_hooks=
}

pgdtf_mirror ()
{
    dtf_dataurls='
http://10.3.8.255/root-tests/data/postgresql/latest
http://pensioner.lab.eng.brq.redhat.com/root-tests/data/postgresql/latest
http://209.132.179.109/dtf/_beta/data/latest
'
    test -n "$pgdtf_mirror_result" && return 0

    _d_timeout=1
    while test $_d_timeout -lt 32; do
      for _d_url in $dtf_dataurls
      do
        echo >&2 "trying $_d_url for $_d_timeout seconds"
        timeout $_d_timeout curl "$_d_url" >/dev/null \
            && pgdtf_mirror_result="$_d_url" \
            && return 0
      done
      _d_timeout=`expr $_d_timeout '*' 2`
    done

    dtf_fail "pgdtf_mirror: no mirror found"
}
